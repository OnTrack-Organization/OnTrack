volumes:
  postgres_data:

networks:
  default:
    name: ontrack_network
    driver: bridge

services:
  db:
    image: 'postgres:17'
    environment:
      - 'POSTGRES_DB=ontrack'
      - 'POSTGRES_USER=default'
      - 'POSTGRES_PASSWORD=demo'
    ports:
      # Expose Port for DB client to connect
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    image: gradle:8.13-jdk21-alpine
    working_dir: /app
    restart: always
    depends_on:
      - db
    environment:
      - 'SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ontrack'
      - 'SPRING_DATASOURCE_USERNAME=default'
      - 'SPRING_DATASOURCE_PASSWORD=demo'
    ports:
      # 5005 is used for debug listener
      - "5005:5005"
    command: gradle bootRun --no-daemon
    volumes:
      - .:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.rule=Host(`api.ontrack.local.riceisnice.dev`)"
      - "traefik.http.routers.backend.tls.certresolver=cloudflare"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"

  proxy:
    image: traefik:latest
    command:
      - "--log=true"
      - "--log.level=debug"
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      # Watch dynamic config and apply changes
      - "--providers.file.watch=true"
      - "--providers.file.directory=/certs"
      # Certificate resolver
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      # use Google 8.8.8.8 and Cloudflare 1.1.1.1 to resolve DNS instead of internal Docker
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.cloudflare.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    volumes:
      # mount docker socket to container as readonly
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # mount volume with cert
      - "./letsencrypt:/letsencrypt"
    ports:
      - "8000:443"
